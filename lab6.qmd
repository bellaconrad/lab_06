---
project:
  title: "Lab 6"
  author: "Bella Conrad"
  date: "2025-03-27"
  output-dir: docs
  type: website
format: 
  html: 
    self-contained: true
execute: 
  echo: true
---

```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(ggplot2)
library(patchwork)
```

```{r}
root <- 'https://gdex.ucar.edu/dataset/camels/file'
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'data/camels_attributes_v2.0.pdf')
```

```{r}
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
```

```{r}
remote_files <- glue('{root}/camels_{types}.txt')
local_files <- glue('data/camels_{types}.txt')
```

```{r}
walk2(remote_files, local_files, download.file, quiet = TRUE)
```

```{r}
camels <- map(local_files, read_delim, show_col_types = FALSE)
```

```{r}
camels <- power_full_join(camels, by = 'gauge_id')
```

# Question 1

Zero_q_freq means frequency of days with Q (dishcharge)= 0 mm per day.

```{r}
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") + 
  geom_point(aes(color = q_mean)) + scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()
```

# Question 2
```{r}
map_aridity <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") + 
  geom_point(aes(color = aridity)) + scale_color_gradient(low = "lightblue", high = "darkred") +
  labs(title = "Aridity Data from USGS sites in the US",
       color = "Aridity") +
  ggthemes::theme_map()
print(map_aridity)
```

```{r}
map_p_mean <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") + 
  geom_point(aes(color = p_mean)) + scale_color_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Mean Precipitation from USGS sites in the US",
       color = "Mean Precipitation") +
  ggthemes::theme_map()
print(map_p_mean)
```

```{r}
final_maps <- map_aridity + map_p_mean + plot_layout(ncol = 2)
print(final_maps)
ggsave("final_maps.png", plot = final_maps, width = 10, height = 6, dpi = 300)
```


```{r}
camels %>% 
  select(aridity, p_mean, q_mean) %>% 
  drop_na() %>% 
  cor()
```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  scale_color_viridis_c() +
  theme_linedraw() +
  theme(legend.position = "bottom") +
  labs(title = "Aridity vs Rainfall vs Runnoff",
       x = "Aridity",
       y = "Rainfall",
       color = "Mean Flow")
```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  scale_x_log10() +
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") +
  labs(title = "Aridity vs Rainfall vs Runoff",
       x = "Aridity",
       y = "Rainfall",
       color = "Mean Flow")
```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```

```{r}
set.seed(123)
camels <- camels %>% 
  mutate(logQmean = log(q_mean))

camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)
```

```{r}
rec <- recipe(logQmean ~ aridity + p_mean, data = camels_train) %>% 
  step_log(all_predictors()) %>% 
  step_interact(terms = ~ aridity:p_mean) %>% 
  step_naomit(all_predictors(), all_outcomes())
```

```{r}
baked_data <- prep(rec, camels_train) %>% 
  bake(new_data = NULL)

lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)
```

```{r}
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))
```

```{r}
test_data <- bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```

```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```

```{r}
ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() +
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observes Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```

```{r}
lm_model <- linear_reg() %>% 
  set_engine("lm") %>% 
  set_mode("regression")

lm_wf <- workflow() %>% 
  add_recipe(rec) %>% 
  add_model(lm_model) %>% 
  fit(data = camels_train)

summary(extract_fit_engine(lm_wf))$coefficients
```

```{r}
summary(lm_base)$coefficients
```

```{r}
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
```

```{r}
metrics(lm_data, truth = logQmean, estimate = .pred)
```

```{r}
ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```

```{r}
library(baguette)
rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf_model) %>%
  fit(data = camels_train) 
```

```{r}
rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)
```

```{r}
metrics(rf_data, truth = logQmean, estimate = .pred)
```

```{r}
ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```

```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)
```

```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```


# Question 3

```{r}
xgb_model <- boost_tree() %>% 
  set_engine("xgboost") %>% 
  set_mode("regression")

nn_model <- bag_mlp() %>% 
  set_engine("nnet") %>% 
  set_mode("regression")
```

```{r}
wf <- workflow_set(
  list(rec),
  list(
    lm_model = lm_model,
    rf_model = rf_model,
    xgb_model = xgb_model,
    nn_model = nn_model
  )
) %>% 
  workflow_map("fit_resamples", resamples = camels_cv)
  
```

```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)

# The random forest model was ranked the best, so I would move forward with this one. It was ranked as the model with the highest r-squared.
```

# Question 4

```{r}

```

